#!/bin/bash
sudo apt update 
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo "This script must be run as root"
        exit 1
    fi
}

# Determine the distribution name once and use it throughout the script
OS_NAME=$(lsb_release -si | tr '[:upper:]' '[:lower:]')

install_package() {
    local package_name="$1"
    local desired_version="$2"

    case "$OS_NAME" in
        "ubuntu" | "debian")
            if dpkg-query -W "$package_name" 2>/dev/null | grep -q "install ok installed"; then
                if [ -z "$desired_version" ]; then
                    echo "$package_name is already installed"
                else
                    local installed_version=$(dpkg-query -W -f='${Version}' "$package_name")
                    if dpkg --compare-versions "$installed_version" ge "$desired_version"; then
                        echo "$package_name is already installed in version $installed_version"
                    else
                        echo "$package_name is installed but an older version. Upgrading to $desired_version."
                        sudo apt install "$package_name=$desired_version" -y
                    fi
                fi
            else
                echo "Installing $package_name"
                if [ -z "$desired_version" ]; then
                    sudo apt install "$package_name" -y
                else
                    sudo apt install "$package_name=$desired_version" -y
                fi
                if [ $? -ne 0 ]; then
                    echo "Failed to install $package_name. Exiting."
                    exit 1
                fi
            fi
            ;;
        "centos" | "rhel" | "fedora")
            if rpm -q "$package_name" >/dev/null 2>&1; then
                echo "$package_name is already installed."
            else
                echo "Installing $package_name"
                sudo dnf install "$package_name" -y
                if [ $? -ne 0 ]; then
                    echo "Failed to install $package_name. Exiting."
                    exit 1
                fi
            fi
            ;;
        "opensuse")
            if zypper search -i -t package "$package_name" >/dev/null 2>&1; then
                echo "$package_name is already installed."
            else
                echo "Installing $package_name"
                sudo zypper install "$package_name" -y
                if [ $? -ne 0 ]; then
                    echo "Failed to install $package_name. Exiting."
                    exit 1
                fi
            fi
            ;;
        "arch")
            if pacman -Qs "$package_name" >/dev/null 2>&1; then
                echo "$package_name is already installed."
            else
                echo "Installing $package_name"
                sudo pacman -Sy --noconfirm "$package_name"
                if [ $? -ne 0 ]; then
                    echo "Failed to install $package_name. Exiting."
                    exit 1
                fi
            fi
            ;;
        "gentoo")
            if emerge -s "$package_name" | grep "\[ Installed \]" >/dev/null; then
                echo "$package_name is already installed."
            else
                echo "Installing $package_name"
                sudo emerge "$package_name"
                if [ $? -ne 0 ]; then
                    echo "Failed to install $package_name. Exiting."
                    exit 1
                fi
            fi
            ;;
        "alpine linux")
            if apk info "$package_name" >/dev/null 2>&1; then
                echo "$package_name is already installed."
            else
                echo "Installing $package_name"
                sudo apk add "$package_name"
                if [ $? -ne 0 ]; then
                    echo "Failed to install $package_name. Exiting."
                    exit 1
                fi
            fi
            ;;
        *)
            echo "Unsupported OS: $OS_NAME. Cannot install packages."
            exit 1
            ;;
    esac
}

check_python_version() {
    if command -v python3.10 >/dev/null 2>&1; then
        echo "Python 3.10 is already installed."
        return 0
    else
        echo "Python 3.10 is not installed."
        return 1
    fi
}

install_python_from_source() {
    if check_python_version; then
        return
    fi

    echo "Updating package list and installing build tools and dependencies..."

    case "$OS_NAME" in
        "ubuntu" | "debian")
            sudo apt update
            install_package "wget"
            install_package "build-essential"
            install_package "libssl-dev"
            install_package "zlib1g-dev"
            install_package "libbz2-dev"
            install_package "libreadline-dev"
            install_package "libsqlite3-dev"
            install_package "llvm"
            install_package "libncurses5-dev"
            install_package "libncursesw5-dev"
            install_package "xz-utils"
            install_package "tk-dev"
            install_package "libffi-dev"
            install_package "liblzma-dev"
            install_package "python3.10-distutils"
            ;;
        "centos" | "rhel" | "fedora")
            sudo dnf makecache
            install_package "wget"
            install_package "gcc"
            install_package "openssl-devel"
            install_package "zlib-devel"
            install_package "bzip2-devel"
            install_package "readline-devel"
            install_package "sqlite-devel"
            install_package "llvm"
            install_package "ncurses-devel"
            install_package "xz-devel"
            install_package "tk-devel"
            install_package "libffi-devel"
            install_package "lzma-sdk-devel"
            ;;
        "opensuse")
            sudo zypper refresh
            install_package "wget"
            install_package "gcc"
            install_package "libopenssl-devel"
            install_package "zlib-devel"
            install_package "bzip2-devel"
            install_package "readline-devel"
            install_package "sqlite3-devel"
            install_package "llvm"
            install_package "ncurses-devel"
            install_package "xz-devel"
            install_package "tk-devel"
            install_package "libffi-devel"
            install_package "lzma-devel"
            ;;
        "arch")
            sudo pacman -Sy
            install_package "wget"
            install_package "base-devel"
            install_package "openssl"
            install_package "zlib"
            install_package "bzip2"
            install_package "readline"
            install_package "sqlite"
            install_package "llvm"
            install_package "ncurses"
            install_package "xz"
            install_package "tk"
            install_package "libffi"
            install_package "xz-utils"
            ;;
        "gentoo")
            sudo emerge --sync
            install_package "wget"
            install_package "gcc"
            install_package "openssl"
            install_package "zlib"
            install_package "bzip2"
            install_package "readline"
            install_package "sqlite"
            install_package "llvm"
            install_package "ncurses"
            install_package "xz"
            install_package "tk"
            install_package "libffi"
            install_package "xz-utils"
            ;;
        "alpine linux")
            sudo apk update
            install_package "wget"
            install_package "gcc"
            install_package "openssl-dev"
            install_package "zlib-dev"
            install_package "bzip2-dev"
            install_package "readline-dev"
            install_package "sqlite-dev"
            install_package "llvm"
            install_package "ncurses-dev"
            install_package "xz-dev"
            install_package "tk-dev"
            install_package "libffi-dev"
            install_package "xz-utils"
            ;;
        *)
            echo "Unsupported OS: $OS_NAME. Python 3.10 installation not supported on this OS."
            exit 1
            ;;
    esac

    echo "Downloading Python 3.10.0 source code..."
    wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tgz || {
        echo "Failed to download Python source. Exiting."
        exit 1
    }

    echo "Extracting Python 3.10.0 source code..."
    tar -xf Python-3.10.0.tgz || {
        echo "Failed to extract Python source. Exiting."
        exit 1
    }

    cd Python-3.10.0 || {
        echo "Python source directory not found. Exiting."
        exit 1
    }

    echo "Configuring Python 3.10.0..."
    ./configure --enable-optimizations || {
        echo "Failed to configure Python. Exiting."
        exit 1
    }

    echo "Building Python 3.10.0..."
    make -j "$(nproc)" || {
        echo "Failed to build Python. Exiting."
        exit 1
    }

    echo "Installing Python 3.10.0..."
    sudo make altinstall || {
        echo "Failed to install Python. Exiting."
        exit 1
    }

    sudo ln -s /usr/local/bin/python3.10 /usr/local/bin/python

    python --version

    cd ..
    sudo rm -rf Python-3.10.0.tgz Python-3.10.0

    echo "Python 3.10.0 has been successfully installed and set as default."
}

check_tool() {
    local tool_name="$1"
    if command -v "$tool_name" >/dev/null 2>&1; then
        echo "$tool_name is already installed."
        return 0
    else
        echo "$tool_name is not installed."
        return 1
    fi
}

install_docker() {
    if check_tool docker; then
        echo "Docker is already installed."
    else
        echo "Installing Docker..."
        case "$OS_NAME" in
            "ubuntu" | "debian")
                sudo apt install curl -y
                curl -fsSL https://get.docker.com -o get-docker.sh
                sudo sh get-docker.sh
                sudo usermod -aG docker $USER
                ;;
            "centos" | "rhel" | "fedora")
                sudo dnf install docker -y
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo usermod -aG docker $USER
                ;;
            "opensuse")
                sudo zypper install docker -y
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo usermod -aG docker $USER
                ;;
            "arch")
                sudo pacman -Sy docker --noconfirm
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo usermod -aG docker $USER
                ;;
            "gentoo")
                sudo emerge docker
                sudo rc-update add docker default
                sudo usermod -aG docker $USER
                sudo systemctl start docker
                ;;
            "alpine linux")
                sudo apk add docker
                sudo rc-update add docker boot
                sudo service docker start
                sudo usermod -aG docker $USER
                ;;
            *)
                echo "Unsupported OS: $OS_NAME. Docker installation not supported on this OS."
                exit 1
                ;;
        esac

        echo "Docker has been installed."
        echo "Please log out and log back in to apply Docker user group changes."
    fi
}

install_pip() {
    if check_tool pip3.10; then
        echo "pip for Python 3.10 is already installed."
    else
        echo "Installing pip for Python 3.10..."
        case "$OS_NAME" in
            "ubuntu" | "debian")
                sudo apt install python3.10-distutils -y
                curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                sudo python3.10 get-pip.py
                ;;
            "centos" | "rhel" | "fedora")
                sudo dnf install python3.10 -y
                curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                sudo python3.10 get-pip.py
                ;;
            "opensuse")
                sudo zypper install python3.10 -y
                curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                sudo python3.10 get-pip.py
                ;;
            "arch")
                sudo pacman -S python-pip --noconfirm
                ;;
            "gentoo")
                sudo emerge -av dev-python/pip
                ;;
            "alpine linux")
                sudo apk add py3-pip
                ;;
            *)
                echo "Unsupported OS: $OS_NAME. pip installation not supported on this OS."
                exit 1
                ;;
        esac

        echo "pip for Python 3.10 has been installed."
    fi
}

install_visual_studio_code() {
    if check_tool code; then
        echo "Visual Studio Code is already installed."
    else
        echo "Downloading and installing Visual Studio Code via Snap..."
        sudo snap install code --classic
        echo "Visual Studio Code has been installed."
    fi
}

check_root
install_python_from_source
install_docker
install_pip

echo "Do you want to install Visual Studio Code? (y/n)"
read answer
if [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
    install_visual_studio_code
fi

echo "Setup completed successfully."

